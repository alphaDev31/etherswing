{
  "contractName": "wipe_proxy",
  "abi": [
    {
      "name": "wipeWithDai",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "_tub"
        },
        {
          "type": "address",
          "name": "_daiExchange"
        },
        {
          "type": "address",
          "name": "_mkrExchange"
        },
        {
          "type": "uint256",
          "name": "cupid"
        },
        {
          "type": "uint256",
          "name": "wad"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 246627
    }
  ],
  "bytecode": "0x610b7556600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052600015610195575b6101805261014052610160527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610140513b6100d657600080fd5b6101405130186100e557600080fd5b6020610240604463dd62ed3e6101a052306101c052610160516101e0526101bc610140515afa61011457600080fd5b60005061024051181561018f57610140513b61012f57600080fd5b61014051301861013e57600080fd5b60006000604463095ea7b36102605261016051610280527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6102a05261027c6000610140515af161018e57600080fd5b5b61018051565b63f4bd42986000511415610b6b5760a060046101403734156101b657600080fd5b60043560205181106101c757600080fd5b5060243560205181106101d957600080fd5b5060443560205181106101eb57600080fd5b506308c379a06101e052602061020052603e610220527f416d6f756e74206f6620446169206465627420746f20706179206261636b206f610240527f6e2074686520434450206d7573742067726561746572207468616e20302e0000610260526102205060006101c051116102615760a46101fcfd5b6101405160005561016051600155610180516002556000543b61028357600080fd5b600054301861029157600080fd5b60206103206004639166cba46102c0526102dc6000545afa6102b257600080fd5b600050610320516102a0526102a0516003556000543b6102d157600080fd5b60005430186102df57600080fd5b60206103c06004639166cba46103605261037c6000545afa61030057600080fd5b6000506103c05161034052610340516004556000543b61031f57600080fd5b600054301861032d57600080fd5b6020610460600463ace237f56104005261041c6000545afa61034e57600080fd5b600050610460516103e0526103e0516005556101a051610480526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e0516104005161042051610440516104605161048051631cedc2036104a0526102a0516104c052610140516104e0526104e0516104c0516006580161009b565b61048052610460526104405261042052610400526103e0526103c0526103a05261038052610360526103405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526000506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e05161040051610420516104405161046051610480516104a0516104c0516104e0516105005161052051631cedc203610540526103405161056052610140516105805261058051610560516006580161009b565b61052052610500526104e0526104c0526104a05261048052610460526104405261042052610400526103e0526103c0526103a05261038052610360526103405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526000506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e05161040051610420516104405161046051610480516104a0516104c0516104e05161050051610520516105405161056051610580516105a0516105c051631cedc2036105e0526102a05161060052610160516106205261062051610600516006580161009b565b6105c0526105a05261058052610560526105405261052052610500526104e0526104c0526104a05261048052610460526104405261042052610400526103e0526103c0526103a05261038052610360526103405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526000506005543b6106fc57600080fd5b600554301861070a57600080fd5b604061072060046359e02dd76106c0526106dc60006005545af161072d57600080fd5b60005061072080516106805260208101516106a052506402540be4006000543b61075657600080fd5b600054301861076457600080fd5b60206108006024636f78ee0d61078052610480516107a05261079c60006000545af161078f57600080fd5b60005061080051026080518111156107a657600080fd5b610760526402540be4006000543b6107bd57600080fd5b60005430186107cb57600080fd5b60206108c0602463f7c8d63461084052610480516108605261085c60006000545af16107f657600080fd5b6000506108c0510260805181111561080d57600080fd5b6108205260a05161076051610820518061082657600080fd5b806402540be400830205905090508060805190131561084457600080fd5b809190121561085257600080fd5b6108e05260a0516402540be40061068051028060805190131561087457600080fd5b809190121561088257600080fd5b6109405260a0516402540be4006101c051026080518111156108a357600080fd5b6109205260a0516108e0516109205181810281158383830514176108c657600080fd5b6402540be4008105905090509050806080519013156108e457600080fd5b80919012156108f257600080fd5b610940518061090057600080fd5b806402540be400830205905090508060805190131561091e57600080fd5b809190121561092c57600080fd5b610900526002543b61093d57600080fd5b600254301861094b57600080fd5b6020610a0060246359e94862610980526402540be40061090051600081121561097357600080fd5b046109a05261099c6002545afa61098957600080fd5b600050610a0051610960526001543b6109a157600080fd5b60015430186109af57600080fd5b6020610ac06024632640f62c610a405261096051610a6052610a5c6001545afa6109d857600080fd5b600050610ac051610a2052610a20516101c051610a20510110156109fb57600080fd5b6101c051610a205101610a20526003543b610a1557600080fd5b6003543018610a2357600080fd5b6020610ba060646323b872dd610ae05233610b005230610b2052610a2051610b4052610afc60006003545af1610a5857600080fd5b600050610ba05060006106805114156106a0511615610b1b57683627e8f712373c0000610bc0524261012c42011015610a9057600080fd5b61012c4201610be0526001543b610aa657600080fd5b6001543018610ab457600080fd5b6020610d0060a463b040d545610c00526402540be400610900516000811215610adc57600080fd5b04610c2052610a2051610c4052610bc051610c6052610be051610c805261034051610ca052610c1c60006001545af1610b1457600080fd5b600050610d005b506000543b610b2957600080fd5b6000543018610b3757600080fd5b6000600060446373b38101610d205261048051610d40526101c051610d6052610d3c60006000545af1610b6957600080fd5b005b60006000fd5b610004610b7503610004600039610004610b75036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052600015610195575b6101805261014052610160527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610140513b6100d657600080fd5b6101405130186100e557600080fd5b6020610240604463dd62ed3e6101a052306101c052610160516101e0526101bc610140515afa61011457600080fd5b60005061024051181561018f57610140513b61012f57600080fd5b61014051301861013e57600080fd5b60006000604463095ea7b36102605261016051610280527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6102a05261027c6000610140515af161018e57600080fd5b5b61018051565b63f4bd42986000511415610b6b5760a060046101403734156101b657600080fd5b60043560205181106101c757600080fd5b5060243560205181106101d957600080fd5b5060443560205181106101eb57600080fd5b506308c379a06101e052602061020052603e610220527f416d6f756e74206f6620446169206465627420746f20706179206261636b206f610240527f6e2074686520434450206d7573742067726561746572207468616e20302e0000610260526102205060006101c051116102615760a46101fcfd5b6101405160005561016051600155610180516002556000543b61028357600080fd5b600054301861029157600080fd5b60206103206004639166cba46102c0526102dc6000545afa6102b257600080fd5b600050610320516102a0526102a0516003556000543b6102d157600080fd5b60005430186102df57600080fd5b60206103c06004639166cba46103605261037c6000545afa61030057600080fd5b6000506103c05161034052610340516004556000543b61031f57600080fd5b600054301861032d57600080fd5b6020610460600463ace237f56104005261041c6000545afa61034e57600080fd5b600050610460516103e0526103e0516005556101a051610480526101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e0516104005161042051610440516104605161048051631cedc2036104a0526102a0516104c052610140516104e0526104e0516104c0516006580161009b565b61048052610460526104405261042052610400526103e0526103c0526103a05261038052610360526103405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526000506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e05161040051610420516104405161046051610480516104a0516104c0516104e0516105005161052051631cedc203610540526103405161056052610140516105805261058051610560516006580161009b565b61052052610500526104e0526104c0526104a05261048052610460526104405261042052610400526103e0526103c0526103a05261038052610360526103405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526000506101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e05161040051610420516104405161046051610480516104a0516104c0516104e05161050051610520516105405161056051610580516105a0516105c051631cedc2036105e0526102a05161060052610160516106205261062051610600516006580161009b565b6105c0526105a05261058052610560526105405261052052610500526104e0526104c0526104a05261048052610460526104405261042052610400526103e0526103c0526103a05261038052610360526103405261032052610300526102e0526102c0526102a05261028052610260526102405261022052610200526101e0526101c0526101a0526101805261016052610140526000506005543b6106fc57600080fd5b600554301861070a57600080fd5b604061072060046359e02dd76106c0526106dc60006005545af161072d57600080fd5b60005061072080516106805260208101516106a052506402540be4006000543b61075657600080fd5b600054301861076457600080fd5b60206108006024636f78ee0d61078052610480516107a05261079c60006000545af161078f57600080fd5b60005061080051026080518111156107a657600080fd5b610760526402540be4006000543b6107bd57600080fd5b60005430186107cb57600080fd5b60206108c0602463f7c8d63461084052610480516108605261085c60006000545af16107f657600080fd5b6000506108c0510260805181111561080d57600080fd5b6108205260a05161076051610820518061082657600080fd5b806402540be400830205905090508060805190131561084457600080fd5b809190121561085257600080fd5b6108e05260a0516402540be40061068051028060805190131561087457600080fd5b809190121561088257600080fd5b6109405260a0516402540be4006101c051026080518111156108a357600080fd5b6109205260a0516108e0516109205181810281158383830514176108c657600080fd5b6402540be4008105905090509050806080519013156108e457600080fd5b80919012156108f257600080fd5b610940518061090057600080fd5b806402540be400830205905090508060805190131561091e57600080fd5b809190121561092c57600080fd5b610900526002543b61093d57600080fd5b600254301861094b57600080fd5b6020610a0060246359e94862610980526402540be40061090051600081121561097357600080fd5b046109a05261099c6002545afa61098957600080fd5b600050610a0051610960526001543b6109a157600080fd5b60015430186109af57600080fd5b6020610ac06024632640f62c610a405261096051610a6052610a5c6001545afa6109d857600080fd5b600050610ac051610a2052610a20516101c051610a20510110156109fb57600080fd5b6101c051610a205101610a20526003543b610a1557600080fd5b6003543018610a2357600080fd5b6020610ba060646323b872dd610ae05233610b005230610b2052610a2051610b4052610afc60006003545af1610a5857600080fd5b600050610ba05060006106805114156106a0511615610b1b57683627e8f712373c0000610bc0524261012c42011015610a9057600080fd5b61012c4201610be0526001543b610aa657600080fd5b6001543018610ab457600080fd5b6020610d0060a463b040d545610c00526402540be400610900516000811215610adc57600080fd5b04610c2052610a2051610c4052610bc051610c6052610be051610c805261034051610ca052610c1c60006001545af1610b1457600080fd5b600050610d005b506000543b610b2957600080fd5b6000543018610b3757600080fd5b6000600060446373b38101610d205261048051610d40526101c051610d6052610d3c60006000545af1610b6957600080fd5b005b60006000fd",
  "source": "# TODO delete once incorporated into ether_swing\n# https://github.com/makerdao/developerguides/blob/master/devtools/working-with-dsproxy/working-with-dsproxy.md#create-a-script\n\ncontract UniswapExchange():\n  def tokenToTokenSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, token_addr: address) -> uint256: modifying\n  def getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei): constant\n  def getTokenToEthOutputPrice(eth_bought: uint256(wei)) -> uint256: constant\n\ncontract Token():\n  def allowance(owner: address, spender: address) -> uint256: constant\n  def balanceOf(owner: address) -> uint256: constant\n  def approve(spender: address, amount: uint256): modifying\n  def transfer(recipient: address, amount: uint256) -> bool: modifying\n  def transferFrom(sender: address, recipient: address, amount: uint256) -> bool: modifying\n\ncontract MakerTub():\n  def wipe(cup: bytes32, wad: uint256): modifying\n  def gov() -> address: constant # confirm this works, solidity interface returns Token\n  def sai() -> address: constant # confirm this works, solidity interface returns Token\n  def tab(cup: bytes32) -> uint256: modifying\n  def rap(cup: bytes32) -> uint256: modifying\n  def pep() -> address: constant # confirm this works, solidity interface returns PepLike\n\ncontract PepLike():\n  def peek() -> (bytes32, bool): modifying\n\n\ntub: MakerTub\ndaiExchange: UniswapExchange\nmkrExchange: UniswapExchange\ndai: Token\nmkr: Token\npep: PepLike\n\n@private\ndef setAllowance(tokenAddress: address, spender: address):\n  if (Token(tokenAddress).allowance(self, spender) != MAX_UINT256):\n    Token(tokenAddress).approve(spender, MAX_UINT256)\n\n@public\ndef wipeWithDai(_tub: address, _daiExchange: address, _mkrExchange: address, cupid: uint256, wad: uint256):\n  # Checks\n  assert wad > 0, \"Amount of Dai debt to pay back on the CDP must greater than 0.\"\n  # Initialize variables\n  self.tub = MakerTub(_tub)\n  self.daiExchange = UniswapExchange(_daiExchange)\n  self.mkrExchange = UniswapExchange(_mkrExchange)\n  daiAddress: address = self.tub.sai()\n  self.dai = Token(daiAddress)\n  mkrAddress: address = self.tub.sai()\n  self.mkr = Token(mkrAddress)\n  pepAddress: address = self.tub.pep()\n  self.pep = PepLike(pepAddress)\n  cup: bytes32 = convert(cupid, bytes32)\n  # Set all allowances\n  self.setAllowance(daiAddress, _tub)\n  self.setAllowance(mkrAddress, _tub)\n  self.setAllowance(daiAddress, _daiExchange)\n  # Transfer Dai to the DSProxy contract\n  # Read the current MKRUSD price\n  mkrUsdPrice: bytes32\n  ok: bool\n  mkrUsdPrice, ok = self.pep.peek()\n  # Calculate the amount of MKR needed to execute wipe by dividing the stability fee amount accrued in Dai with the current value reported by the MKRUSD price oracle contract\n  # One liner (uint)\n  # mkrFee: uint256 = wad * (self.tub.rap(cup) / self.tub.tab(cup)) / convert(val, uint256)\n  # One liner (decimal):\n  # mkrFee: decimal = convert(wad, decimal) * (convert(self.tub.rap(cup), decimal) / convert(self.tub.tab(cup), decimal)) / convert(mkrUsdPrice, decimal)\n  totalFeesInDai: decimal = convert(self.tub.rap(cup), decimal)\n  totalDrawnDai: decimal = convert(self.tub.tab(cup), decimal)\n  feesPerDai: decimal = totalFeesInDai / totalDrawnDai\n  mkrFee: decimal = convert(wad, decimal) * feesPerDai / convert(mkrUsdPrice, decimal)\n\n  # Calculate the additional Dai needed to buy MKR from Uniswap...\n  # First calculate the amount of ETH needed to buy the required MKR\n  ethAmt: uint256(wei) = self.mkrExchange.getEthToTokenOutputPrice(convert(mkrFee, uint256))\n  # Then calculate the amount of Dai needed to buy the required ETH\n  daiAmt: uint256 = self.daiExchange.getTokenToEthOutputPrice(ethAmt)\n  # calculate the total amount of Dai and transfer it from the user's address to their DSProxy contract\n  daiAmt = daiAmt + wad\n  self.dai.transferFrom(msg.sender, self, daiAmt)\n  # Exchange Dai for MKR on Uniswap\n  if ok and mkrUsdPrice != convert(0, bytes32):\n    max_eth_sold: uint256(wei) = 999000000000000000000\n    deadline: timestamp = block.timestamp + 300\n    self.daiExchange.tokenToTokenSwapOutput(convert(mkrFee, uint256), daiAmt, max_eth_sold, deadline, mkrAddress)\n  # Wipe Dai debt from the CDP\n  self.tub.wipe(cup, wad)\n",
  "sourcePath": "/Users/samrichards/code/tu/etherswing/contracts/wipe_proxy.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b10"
  },
  "networks": {},
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-08-22T14:53:45.719Z"
}