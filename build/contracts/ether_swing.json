{
  "contractName": "ether_swing",
  "abi": [
    {
      "name": "Payment",
      "inputs": [
        {
          "type": "uint256",
          "name": "_amount",
          "indexed": false,
          "unit": "wei"
        },
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "uniswap_factory_address"
        },
        {
          "type": "address",
          "name": "dai_token_address"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "constructor"
    },
    {
      "constant": false,
      "payable": true,
      "type": "fallback"
    },
    {
      "name": "fund",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 345
    },
    {
      "name": "transfer",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "uint256",
          "name": "amount",
          "unit": "wei"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 36106
    },
    {
      "name": "openPosition",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "leverage"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 71797
    },
    {
      "name": "exchangeDaiForEth",
      "outputs": [
        {
          "type": "uint256",
          "name": "out",
          "unit": "wei"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "dai_to_sell"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 4901
    },
    {
      "name": "exchangeEthForDai",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "wei_to_sell",
          "unit": "wei"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 37586
    },
    {
      "name": "getContractBalance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out",
          "unit": "wei"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 832
    },
    {
      "name": "getLockedEthBalance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out",
          "unit": "wei"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 852
    },
    {
      "name": "uniswapFactoryAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 693
    },
    {
      "name": "daiTokenAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 723
    },
    {
      "name": "daiExchangeAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 753
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05260406109b66101403960206109b660c03960c05160205181106100af57600080fd5b50602060206109b60160c03960c05160205181106100cc57600080fd5b50600061014051186100dd57600080fd5b600061016051186100ed57600080fd5b336000556101405160015561016051600255610140516004556004543b61011357600080fd5b600454301861012157600080fd5b602061020060246306f2bf6261018052610160516101a05261019c6004545afa61014a57600080fd5b60005061020051600555600554600655610160516003556003543b61016e57600080fd5b600354301861017c57600080fd5b60206102c0604463095ea7b361022052600554610240527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6102605261023c60006003545af16101cb57600080fd5b6000506102c05061099e56600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263b60d42886000511415610115576308c379a0610140526020610160526026610180527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101a0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101c05261018050600034116101135760a461015cfd5b005b63a9059cbb600051141561022a576040600461014037341561013657600080fd5b600435602051811061014757600080fd5b506308c379a06101805260206101a052602d6101c0527f4d75737420626520636f6e7472616374206f776e657220746f2063616c6c20746101e0527f6869732066756e6374696f6e2e00000000000000000000000000000000000000610200526101c05060005433146101bb5760a461019cfd5b6308c379a061024052602061026052601e610280527f496e73756666696369656e7420636f6e74726163742062616c616e63652e00006102a05261028050610160513031101561020c57608461025cfd5b600060006000600061016051610140516000f161022857600080fd5b005b6399ff820360005114156104325760206004610140376308c379a06101605260206101805260266101a0527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101c0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101e0526101a050600034116102b25760a461017cfd5b6308c379a0610220526020610240526024610260527f4c65766572616765206d756c7469706c696572206d7573742062652062656c6f610280527f7720332e000000000000000000000000000000000000000000000000000000006102a05261026050600361014051106103275760a461023cfd5b341515610335576000610352565b6101405134610140513402041461034b57600080fd5b6101405134025b6102e0526308c379a061030052602061032052604e610340527f496e73756666696369656e7420636f6e74726163742062616c616e63652e2050610360527f6c6561736520757365206120736d616c6c657220616d6f756e74206f72207472610380527f7920616761696e206c617465722e0000000000000000000000000000000000006103a052610340506102e051303110156103f15760c461031cfd5b346102e0513401101561040357600080fd5b6102e05134016103e05260073360e05260c052604060c02060c052602060c0203381556103e051600182015550005b63ec3e1c8560005114156105a5576020600461014037341561045357600080fd5b6003543b61046057600080fd5b600354301861046e57600080fd5b602061020060246370a0823161018052306101a05261019c6003545afa61049457600080fd5b60005061020051610160526308c379a061022052602061024052602a610260527f496e73756666696369656e7420636f6e74726163742062616c616e636520746f610280527f2073656c6c204441492e000000000000000000000000000000000000000000006102a052610260506101405161016051116105165760a461023cfd5b60016102e0524261012c4201101561052d57600080fd5b61012c4201610300526006543b61054357600080fd5b600654301861055157600080fd5b602061040060646395e3c50b6103405261014051610360526102e05161038052610300516103a05261035c60006006545af161058c57600080fd5b60005061040051610320526103205160005260206000f3005b6311cf444460005114156106c557602060046101403734156105c657600080fd5b6308c379a061016052602061018052602a6101a0527f496e73756666696369656e7420636f6e74726163742062616c616e636520746f6101c0527f2073656c6c204554482e000000000000000000000000000000000000000000006101e0526101a050610140513031101561063c5760a461017cfd5b6001610220524261012c4201101561065357600080fd5b61012c4201610240526006543b61066957600080fd5b600654301861067757600080fd5b6020610320604463f39b5b9b61028052610220516102a052610240516102c05261029c610140516006545af16106ac57600080fd5b60005061032051610260526102605160005260206000f3005b636f9fb98a60005114156106ea5734156106de57600080fd5b303160005260206000f3005b63f462fc7c600051141561072757341561070357600080fd5b600160073360e05260c052604060c02060c052602060c020015460005260206000f3005b633655ac3c600051141561074d57341561074057600080fd5b60015460005260206000f3005b632eaee35e600051141561077357341561076657600080fd5b60025460005260206000f3005b63391d1520600051141561079957341561078c57600080fd5b60055460005260206000f3005b3461014052337ff817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e6020610140a25b6101d761099e036101d76000396101d761099e036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263b60d42886000511415610115576308c379a0610140526020610160526026610180527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101a0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101c05261018050600034116101135760a461015cfd5b005b63a9059cbb600051141561022a576040600461014037341561013657600080fd5b600435602051811061014757600080fd5b506308c379a06101805260206101a052602d6101c0527f4d75737420626520636f6e7472616374206f776e657220746f2063616c6c20746101e0527f6869732066756e6374696f6e2e00000000000000000000000000000000000000610200526101c05060005433146101bb5760a461019cfd5b6308c379a061024052602061026052601e610280527f496e73756666696369656e7420636f6e74726163742062616c616e63652e00006102a05261028050610160513031101561020c57608461025cfd5b600060006000600061016051610140516000f161022857600080fd5b005b6399ff820360005114156104325760206004610140376308c379a06101605260206101805260266101a0527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101c0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101e0526101a050600034116102b25760a461017cfd5b6308c379a0610220526020610240526024610260527f4c65766572616765206d756c7469706c696572206d7573742062652062656c6f610280527f7720332e000000000000000000000000000000000000000000000000000000006102a05261026050600361014051106103275760a461023cfd5b341515610335576000610352565b6101405134610140513402041461034b57600080fd5b6101405134025b6102e0526308c379a061030052602061032052604e610340527f496e73756666696369656e7420636f6e74726163742062616c616e63652e2050610360527f6c6561736520757365206120736d616c6c657220616d6f756e74206f72207472610380527f7920616761696e206c617465722e0000000000000000000000000000000000006103a052610340506102e051303110156103f15760c461031cfd5b346102e0513401101561040357600080fd5b6102e05134016103e05260073360e05260c052604060c02060c052602060c0203381556103e051600182015550005b63ec3e1c8560005114156105a5576020600461014037341561045357600080fd5b6003543b61046057600080fd5b600354301861046e57600080fd5b602061020060246370a0823161018052306101a05261019c6003545afa61049457600080fd5b60005061020051610160526308c379a061022052602061024052602a610260527f496e73756666696369656e7420636f6e74726163742062616c616e636520746f610280527f2073656c6c204441492e000000000000000000000000000000000000000000006102a052610260506101405161016051116105165760a461023cfd5b60016102e0524261012c4201101561052d57600080fd5b61012c4201610300526006543b61054357600080fd5b600654301861055157600080fd5b602061040060646395e3c50b6103405261014051610360526102e05161038052610300516103a05261035c60006006545af161058c57600080fd5b60005061040051610320526103205160005260206000f3005b6311cf444460005114156106c557602060046101403734156105c657600080fd5b6308c379a061016052602061018052602a6101a0527f496e73756666696369656e7420636f6e74726163742062616c616e636520746f6101c0527f2073656c6c204554482e000000000000000000000000000000000000000000006101e0526101a050610140513031101561063c5760a461017cfd5b6001610220524261012c4201101561065357600080fd5b61012c4201610240526006543b61066957600080fd5b600654301861067757600080fd5b6020610320604463f39b5b9b61028052610220516102a052610240516102c05261029c610140516006545af16106ac57600080fd5b60005061032051610260526102605160005260206000f3005b636f9fb98a60005114156106ea5734156106de57600080fd5b303160005260206000f3005b63f462fc7c600051141561072757341561070357600080fd5b600160073360e05260c052604060c02060c052602060c020015460005260206000f3005b633655ac3c600051141561074d57341561074057600080fd5b60015460005260206000f3005b632eaee35e600051141561077357341561076657600080fd5b60025460005260206000f3005b63391d1520600051141561079957341561078c57600080fd5b60055460005260206000f3005b3461014052337ff817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e6020610140a2",
  "source": "# NOTE: import statements are currently interpreted from CWD. See:\n# https://github.com/ethereum/vyper/pull/1361\n# So must call compile command from within /contracts/\n# TODO figure out imports...\n# import uniswap_factory_interface as UniswapFactoryInterface\n# import uniswap_exchange_interface as UniswapExchangeInterface\n\nstruct CDP:\n  owner: address\n  lockedEth: uint256(wei)\n\n# Interfaces\n\ncontract UniswapFactoryInterface():\n    # Create Exchange\n    def createExchange(token: address) -> address: modifying\n    # Public Variables\n    def exchangeTemplate() -> address: constant\n    def tokenCount() -> uint256: constant\n    # Get Exchange and Token Info\n    def getExchange(token_addr: address) -> address: constant\n    def getToken(exchange: address) -> address: constant\n    def getTokenWithId(token_id: uint256) -> address: constant\n    # Initialize Factory\n    def initializeFactory(template: address): modifying\n\ncontract UniswapExchangeInterface():\n    # Public Variables\n    def tokenAddress() -> address: constant\n    def factoryAddress() -> address: constant\n    # Providing Liquidity\n    def addLiquidity(min_liquidity: uint256, max_tokens: uint256, deadline: timestamp) -> uint256: modifying\n    def removeLiquidity(amount: uint256, min_eth: uint256(wei), min_tokens: uint256, deadline: timestamp) -> (uint256(wei), uint256): modifying\n    # Trading\n    def ethToTokenSwapInput(min_tokens: uint256, deadline: timestamp) -> uint256: modifying\n    def ethToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying\n    def ethToTokenSwapOutput(tokens_bought: uint256, deadline: timestamp) -> uint256(wei): modifying\n    def ethToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(wei): modifying\n    def tokenToEthSwapInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp) -> uint256(wei): modifying\n    def tokenToEthTransferInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp, recipient: address) -> uint256(wei): modifying\n    def tokenToEthSwapOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp) -> uint256: modifying\n    def tokenToEthTransferOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying\n    def tokenToTokenSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, token_addr: address) -> uint256: modifying\n    def tokenToTokenTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256: modifying\n    def tokenToTokenSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, token_addr: address) -> uint256: modifying\n    def tokenToTokenTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256: modifying\n    def tokenToExchangeSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256: modifying\n    def tokenToExchangeTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256: modifying\n    def tokenToExchangeSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256: modifying\n    def tokenToExchangeTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256: modifying\n    # Get Price\n    def getEthToTokenInputPrice(eth_sold: uint256(wei)) -> uint256: constant\n    def getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei): constant\n    def getTokenToEthInputPrice(tokens_sold: uint256) -> uint256(wei): constant\n    def getTokenToEthOutputPrice(eth_bought: uint256(wei)) -> uint256: constant\n    # Pool Token ERC20 Compatibility\n    def balanceOf() -> address: constant\n    def allowance(_owner : address, _spender : address) -> uint256: constant\n    def transfer(_to : address, _value : uint256) -> bool: modifying\n    def transferFrom(_from : address, _to : address, _value : uint256) -> bool: modifying\n    def approve(_spender : address, _value : uint256) -> bool: modifying\n    # Setup\n    def setup(token_addr: address): modifying\n\ncontract DaiTokenInterface():\n  def balanceOf(owner: address) -> uint256: constant\n  def approve(spender: address, amount: uint256) -> bool: modifying\n\n# Events\n\nPayment: event({_amount: uint256(wei), _from: indexed(address)})\n\n# Storage\n\nowner: address\nuniswapFactoryAddress: public(address)\ndaiTokenAddress: public(address)\ndaiToken: DaiTokenInterface\nuniswapFactory: UniswapFactoryInterface\ndaiExchangeAddress: public(address)\ndaiExchange: UniswapExchangeInterface\nuserToCDP: map(address, CDP)\n\n# Constructor\n@public\n@payable # TODO open vyper issue on error sending value... not obvious constructor must be payable\ndef __init__(uniswap_factory_address: address, dai_token_address: address):\n  assert uniswap_factory_address != ZERO_ADDRESS\n  assert dai_token_address != ZERO_ADDRESS\n  self.owner = msg.sender\n  self.uniswapFactoryAddress = uniswap_factory_address\n  self.daiTokenAddress = dai_token_address\n  self.uniswapFactory = UniswapFactoryInterface(uniswap_factory_address)\n  self.daiExchangeAddress = self.uniswapFactory.getExchange(dai_token_address)\n  self.daiExchange = UniswapExchangeInterface(self.daiExchangeAddress)\n  # Approve Dai exchange to transfer funds\n  self.daiToken = DaiTokenInterface(dai_token_address)\n  self.daiToken.approve(self.daiExchangeAddress, 2**256 - 1)\n\n\n# Need default function to receive ETH from Dai exchange\n# https://vyper.readthedocs.io/en/v0.1.0-beta.10/structure-of-a-contract.html#default-function\n@public\n@payable\ndef __default__():\n    log.Payment(msg.value, msg.sender)\n\n# Fund the contract's treasury\n@public\n@payable\ndef fund():\n  assert msg.value > 0, \"Must send value to call this function.\"\n\n# Transfer contract's treasury\n@public\ndef transfer(recipient: address, amount: uint256(wei)):\n  assert msg.sender == self.owner, \"Must be contract owner to call this function.\"\n  assert self.balance >= amount, \"Insufficient contract balance.\"\n  send(recipient, amount)\n\n# Open leveraged ETH position\n@public\n@payable\ndef openPosition(leverage: uint256):\n  assert msg.value > 0, \"Must send value to call this function.\"\n  assert leverage < 3, \"Leverage multiplier must be below 3.\" # TODO how to support decimals? 2.5x\n  ethLoan: uint256(wei) = msg.value * leverage\n  assert self.balance >= ethLoan, \"Insufficient contract balance. Please use a smaller amount or try again later.\"\n  totalEth: uint256(wei) = msg.value + ethLoan\n\n  # check if msg.sender already has an open CDP\n  # if they do...\n    # add totalEth to existing CDP\n  # else...\n    # open CDP w/ totalEth\n  self.userToCDP[msg.sender] = CDP({owner: msg.sender, lockedEth: totalEth})\n\n# Close leveraged ETH position & return funds to user\n# @public\n# def closePosition():\n  # assert user has an open position\n  # use treasury balance to exchange ETH for Dai on Uniswap\n  # close CDP by sending Dai\n  # transfer all funds (minus ethLoan & fees) to msg.sender\n\n# TODO set private once tested\n# Exchange DAI for ETH on Uniswap, returns value of ETH received\n@public\ndef exchangeDaiForEth(dai_to_sell: uint256) -> uint256(wei):\n  dai_balance: uint256 = self.daiToken.balanceOf(self)\n  assert dai_balance > dai_to_sell, \"Insufficient contract balance to sell DAI.\"\n  min_eth_to_buy: uint256(wei) = 1\n  deadline: timestamp = block.timestamp + 300\n  eth_bought: uint256(wei) = self.daiExchange.tokenToEthSwapInput(dai_to_sell, min_eth_to_buy, deadline)\n  return eth_bought\n  # TODO send amount_received to user's CDP\n\n# TODO set private once tested\n# Exchange ETH for DAI on Uniswap, returns value of DAI received\n@public\ndef exchangeEthForDai(wei_to_sell: uint256(wei)) -> uint256:\n  assert self.balance >= wei_to_sell, \"Insufficient contract balance to sell ETH.\"\n  min_tokens_to_buy: uint256 = 1\n  deadline: timestamp = block.timestamp + 300\n  dai_received: uint256 = self.daiExchange.ethToTokenSwapInput(min_tokens_to_buy, deadline, value=wei_to_sell)\n  return dai_received\n  # TODO send amount_received to user's CDP\n\n@public\n@constant\ndef getContractBalance() -> uint256(wei):\n  return self.balance\n\n@public\n@constant\ndef getLockedEthBalance() -> uint256(wei):\n  return self.userToCDP[msg.sender].lockedEth",
  "sourcePath": "/Users/samrichards/code/tu/etherswing/contracts/ether_swing.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b10"
  },
  "networks": {
    "5777": {
      "events": {
        "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e": {
          "name": "Payment",
          "inputs": [
            {
              "type": "uint256",
              "name": "_amount",
              "indexed": false,
              "unit": "wei"
            },
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e"
        }
      },
      "links": {},
      "address": "0x756DDDdF176513214551F116BE17F371083D45f0",
      "transactionHash": "0x6f2bfc81daefb3a5ce56525cfdec1bdc5d506a090455ed7c236653cace061fcd"
    }
  },
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-07-13T20:38:26.390Z"
}