{
  "contractName": "ether_swing",
  "abi": [
    {
      "name": "Payment",
      "inputs": [
        {
          "type": "uint256",
          "name": "_amount",
          "indexed": false,
          "unit": "wei"
        },
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "factory"
        },
        {
          "type": "address",
          "name": "tub"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "constructor"
    },
    {
      "constant": false,
      "payable": true,
      "type": "fallback"
    },
    {
      "name": "fund",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 345
    },
    {
      "name": "transfer",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "uint256",
          "name": "amount",
          "unit": "wei"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 36106
    },
    {
      "name": "exchangeDaiForEth",
      "outputs": [
        {
          "type": "uint256",
          "name": "out",
          "unit": "wei"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "dai_to_sell"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 4871
    },
    {
      "name": "exchangeEthForDai",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "wei_to_sell",
          "unit": "wei"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 37556
    },
    {
      "name": "openPosition",
      "outputs": [],
      "inputs": [
        {
          "type": "fixed168x10",
          "name": "leverage"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 125036
    },
    {
      "name": "getContractBalance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out",
          "unit": "wei"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 832
    },
    {
      "name": "getLockedEthBalance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 852
    },
    {
      "name": "uniswapFactory",
      "outputs": [
        {
          "type": "address",
          "name": "out",
          "unit": "UniswapFactory"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 693
    },
    {
      "name": "daiExchange",
      "outputs": [
        {
          "type": "address",
          "name": "out",
          "unit": "UniswapExchange"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 723
    },
    {
      "name": "makerTub",
      "outputs": [
        {
          "type": "address",
          "name": "out",
          "unit": "MakerTub"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 753
    },
    {
      "name": "mkrExchange",
      "outputs": [
        {
          "type": "address",
          "name": "out",
          "unit": "UniswapExchange"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 783
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052604061121d61014039602061121d60c03960c05160205181106100af57600080fd5b506020602061121d0160c03960c05160205181106100cc57600080fd5b50600061014051186100dd57600080fd5b600061016051186100ed57600080fd5b33600055610160516008556008543b61010557600080fd5b600854301861011357600080fd5b60206101e06004639166cba46101805261019c6008545afa61013457600080fd5b6000506101e0516002556008543b61014b57600080fd5b600854301861015957600080fd5b602061026060046312d43a516102005261021c6008545afa61017a57600080fd5b600050610260516003556008543b61019157600080fd5b600854301861019f57600080fd5b60206102e06004637bd2bea76102805261029c6008545afa6101c057600080fd5b6000506102e0516004556008543b6101d757600080fd5b60085430186101e557600080fd5b60206103606004630f8a771e6103005261031c6008545afa61020657600080fd5b600050610360516005556002543b61021d57600080fd5b600254301861022b57600080fd5b6020610420604463095ea7b3610380526008546103a0527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6103c05261039c60006002545af161027a57600080fd5b600050610420506003543b61028e57600080fd5b600354301861029c57600080fd5b60206104e0604463095ea7b361044052600854610460527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6104805261045c60006003545af16102eb57600080fd5b6000506104e0506004543b6102ff57600080fd5b600454301861030d57600080fd5b60206105a0604463095ea7b361050052600854610520527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6105405261051c60006004545af161035c57600080fd5b6000506105a0506005543b61037057600080fd5b600554301861037e57600080fd5b6020610660604463095ea7b36105c0526008546105e0527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610600526105dc60006005545af16103cd57600080fd5b60005061066050610140516006556006543b6103e857600080fd5b60065430186103f657600080fd5b60206107a060246306f2bf62610720526008543b61041357600080fd5b600854301861042157600080fd5b60206107006004639166cba46106a0526106bc6008545afa61044257600080fd5b600050610700516107405261073c6006545afa61045e57600080fd5b6000506107a05161068052610680516007556002543b61047d57600080fd5b600254301861048b57600080fd5b6020610860604463095ea7b36107c052610680516107e0527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610800526107dc60006002545af16104db57600080fd5b600050610860506006543b6104ef57600080fd5b60065430186104fd57600080fd5b60206109a060246306f2bf62610920526008543b61051a57600080fd5b600854301861052857600080fd5b602061090060046312d43a516108a0526108bc6008545afa61054957600080fd5b600050610900516109405261093c6006545afa61056557600080fd5b6000506109a05161088052610880516009556003543b61058457600080fd5b600354301861059257600080fd5b6020610a60604463095ea7b36109c052610880516109e0527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610a00526109dc60006003545af16105e257600080fd5b600050610a605061120556600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263b60d42886000511415610115576308c379a0610140526020610160526026610180527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101a0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101c05261018050600034116101135760a461015cfd5b005b63a9059cbb600051141561022a576040600461014037341561013657600080fd5b600435602051811061014757600080fd5b506308c379a06101805260206101a052602d6101c0527f4d75737420626520636f6e7472616374206f776e657220746f2063616c6c20746101e0527f6869732066756e6374696f6e2e00000000000000000000000000000000000000610200526101c05060005433146101bb5760a461019cfd5b6308c379a061024052602061026052601e610280527f496e73756666696369656e7420636f6e74726163742062616c616e63652e00006102a05261028050610160513031101561020c57608461025cfd5b600060006000600061016051610140516000f161022857600080fd5b005b63ec3e1c85600051141561039d576020600461014037341561024b57600080fd5b6002543b61025857600080fd5b600254301861026657600080fd5b602061020060246370a0823161018052306101a05261019c6002545afa61028c57600080fd5b60005061020051610160526308c379a061022052602061024052602a610260527f496e73756666696369656e7420636f6e74726163742062616c616e636520746f610280527f2073656c6c204441492e000000000000000000000000000000000000000000006102a0526102605061014051610160511161030e5760a461023cfd5b60016102e0524261012c4201101561032557600080fd5b61012c4201610300526007543b61033b57600080fd5b600754301861034957600080fd5b602061040060646395e3c50b6103405261014051610360526102e05161038052610300516103a05261035c60006007545af161038457600080fd5b60005061040051610320526103205160005260206000f3005b6311cf444460005114156104bd57602060046101403734156103be57600080fd5b6308c379a061016052602061018052602a6101a0527f496e73756666696369656e7420636f6e74726163742062616c616e636520746f6101c0527f2073656c6c204554482e000000000000000000000000000000000000000000006101e0526101a05061014051303110156104345760a461017cfd5b6001610220524261012c4201101561044b57600080fd5b61012c4201610240526007543b61046157600080fd5b600754301861046f57600080fd5b6020610320604463f39b5b9b61028052610220516102a052610240516102c05261029c610140516007545af16104a457600080fd5b60005061032051610260526102605160005260206000f3005b63d5933aab6000511415610aef5760206004610140376308c379a06101605260206101805260266101a0527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101c0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101e0526101a050600034116105455760a461017cfd5b6308c379a0610220526020610240526024610260527f4c65766572616765206d756c7469706c696572206d7573742062652062656c6f610280527f7720332e000000000000000000000000000000000000000000000000000000006102a052610260506406fc23ac0061014051126105be5760a461023cfd5b6402540be40034026080518111156105d557600080fd5b6102e05260a051610140516102e05181810281158383830514176105f857600080fd5b6402540be40081059050905090508060805190131561061657600080fd5b809190121561062457600080fd5b610300526402540be40030310260805181111561064057600080fd5b610320526308c379a061034052602061036052604e610380527f496e73756666696369656e7420636f6e74726163742062616c616e63652e20506103a0527f6c6561736520757365206120736d616c6c657220616d6f756e74206f722074726103c0527f7920616761696e206c617465722e0000000000000000000000000000000000006103e05261038050610300516103205112156106e15760c461035cfd5b60a051610300516102e05101806080519013156106fd57600080fd5b809190121561070b57600080fd5b610420526004543b61071c57600080fd5b600454301861072a57600080fd5b60006000600463d0e30db06104405261045c610420516004545af161074e57600080fd5b6008543b61075b57600080fd5b600854301861076957600080fd5b6020610520600463fcfff16f6104c0526104dc60006008545af161078c57600080fd5b600050610520516104a0526402540be4006008543b6107aa57600080fd5b60085430186107b857600080fd5b60206105c06004637ec9c3b86105605261057c6008545afa6107d957600080fd5b6000506105c051026080518111156107f057600080fd5b6105e05260a051610420516105e0518061080957600080fd5b806402540be400830205905090508060805190131561082757600080fd5b809190121561083557600080fd5b610540526008543b61084657600080fd5b600854301861085457600080fd5b60006000602463049878f3610600526402540be40061054051600081121561087b57600080fd5b046106205261061c60006008545af161089357600080fd5b6008543b6108a057600080fd5b60085430186108ae57600080fd5b60006000604463b3b77a51610680526104a0516106a0526402540be4006105405160008112156108dd57600080fd5b046106c05261069c60006008545af16108f557600080fd5b60013360e05260c052604060c02060c052602060c0203381556402540be40061054051600081121561092657600080fd5b0460018201555060a0516402540be4006008543b61094357600080fd5b600854301861095157600080fd5b60206107a0600463d741e2f96107405261075c6008545afa61097257600080fd5b6000506107a0513b61098357600080fd5b6008543b61099057600080fd5b600854301861099e57600080fd5b60206107a0600463d741e2f96107405261075c6008545afa6109bf57600080fd5b6000506107a05130186109d157600080fd5b602061082060046357de26a46107c0526107dc6008543b6109f157600080fd5b60085430186109ff57600080fd5b60206107a0600463d741e2f96107405261075c6008545afa610a2057600080fd5b6000506107a0515afa610a3257600080fd5b600050610820510280608051901315610a4a57600080fd5b8091901215610a5857600080fd5b6108405260a05161084051610300518181028115838383051417610a7b57600080fd5b6402540be400810590509050905080608051901315610a9957600080fd5b8091901215610aa757600080fd5b6107205260206108e0602463ec3e1c85610860526402540be400610720516000811215610ad357600080fd5b046108805261087c6000305af1610ae957600080fd5b6108e050005b636f9fb98a6000511415610b14573415610b0857600080fd5b303160005260206000f3005b63f462fc7c6000511415610b51573415610b2d57600080fd5b600160013360e05260c052604060c02060c052602060c020015460005260206000f3005b638bdb2afa6000511415610b77573415610b6a57600080fd5b60065460005260206000f3005b6307bf76da6000511415610b9d573415610b9057600080fd5b60075460005260206000f3005b632e65ca656000511415610bc3573415610bb657600080fd5b60085460005260206000f3005b63814339216000511415610be9573415610bdc57600080fd5b60095460005260206000f3005b3461014052337ff817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e6020610140a25b6105ee611205036105ee6000396105ee611205036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263b60d42886000511415610115576308c379a0610140526020610160526026610180527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101a0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101c05261018050600034116101135760a461015cfd5b005b63a9059cbb600051141561022a576040600461014037341561013657600080fd5b600435602051811061014757600080fd5b506308c379a06101805260206101a052602d6101c0527f4d75737420626520636f6e7472616374206f776e657220746f2063616c6c20746101e0527f6869732066756e6374696f6e2e00000000000000000000000000000000000000610200526101c05060005433146101bb5760a461019cfd5b6308c379a061024052602061026052601e610280527f496e73756666696369656e7420636f6e74726163742062616c616e63652e00006102a05261028050610160513031101561020c57608461025cfd5b600060006000600061016051610140516000f161022857600080fd5b005b63ec3e1c85600051141561039d576020600461014037341561024b57600080fd5b6002543b61025857600080fd5b600254301861026657600080fd5b602061020060246370a0823161018052306101a05261019c6002545afa61028c57600080fd5b60005061020051610160526308c379a061022052602061024052602a610260527f496e73756666696369656e7420636f6e74726163742062616c616e636520746f610280527f2073656c6c204441492e000000000000000000000000000000000000000000006102a0526102605061014051610160511161030e5760a461023cfd5b60016102e0524261012c4201101561032557600080fd5b61012c4201610300526007543b61033b57600080fd5b600754301861034957600080fd5b602061040060646395e3c50b6103405261014051610360526102e05161038052610300516103a05261035c60006007545af161038457600080fd5b60005061040051610320526103205160005260206000f3005b6311cf444460005114156104bd57602060046101403734156103be57600080fd5b6308c379a061016052602061018052602a6101a0527f496e73756666696369656e7420636f6e74726163742062616c616e636520746f6101c0527f2073656c6c204554482e000000000000000000000000000000000000000000006101e0526101a05061014051303110156104345760a461017cfd5b6001610220524261012c4201101561044b57600080fd5b61012c4201610240526007543b61046157600080fd5b600754301861046f57600080fd5b6020610320604463f39b5b9b61028052610220516102a052610240516102c05261029c610140516007545af16104a457600080fd5b60005061032051610260526102605160005260206000f3005b63d5933aab6000511415610aef5760206004610140376308c379a06101605260206101805260266101a0527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101c0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101e0526101a050600034116105455760a461017cfd5b6308c379a0610220526020610240526024610260527f4c65766572616765206d756c7469706c696572206d7573742062652062656c6f610280527f7720332e000000000000000000000000000000000000000000000000000000006102a052610260506406fc23ac0061014051126105be5760a461023cfd5b6402540be40034026080518111156105d557600080fd5b6102e05260a051610140516102e05181810281158383830514176105f857600080fd5b6402540be40081059050905090508060805190131561061657600080fd5b809190121561062457600080fd5b610300526402540be40030310260805181111561064057600080fd5b610320526308c379a061034052602061036052604e610380527f496e73756666696369656e7420636f6e74726163742062616c616e63652e20506103a0527f6c6561736520757365206120736d616c6c657220616d6f756e74206f722074726103c0527f7920616761696e206c617465722e0000000000000000000000000000000000006103e05261038050610300516103205112156106e15760c461035cfd5b60a051610300516102e05101806080519013156106fd57600080fd5b809190121561070b57600080fd5b610420526004543b61071c57600080fd5b600454301861072a57600080fd5b60006000600463d0e30db06104405261045c610420516004545af161074e57600080fd5b6008543b61075b57600080fd5b600854301861076957600080fd5b6020610520600463fcfff16f6104c0526104dc60006008545af161078c57600080fd5b600050610520516104a0526402540be4006008543b6107aa57600080fd5b60085430186107b857600080fd5b60206105c06004637ec9c3b86105605261057c6008545afa6107d957600080fd5b6000506105c051026080518111156107f057600080fd5b6105e05260a051610420516105e0518061080957600080fd5b806402540be400830205905090508060805190131561082757600080fd5b809190121561083557600080fd5b610540526008543b61084657600080fd5b600854301861085457600080fd5b60006000602463049878f3610600526402540be40061054051600081121561087b57600080fd5b046106205261061c60006008545af161089357600080fd5b6008543b6108a057600080fd5b60085430186108ae57600080fd5b60006000604463b3b77a51610680526104a0516106a0526402540be4006105405160008112156108dd57600080fd5b046106c05261069c60006008545af16108f557600080fd5b60013360e05260c052604060c02060c052602060c0203381556402540be40061054051600081121561092657600080fd5b0460018201555060a0516402540be4006008543b61094357600080fd5b600854301861095157600080fd5b60206107a0600463d741e2f96107405261075c6008545afa61097257600080fd5b6000506107a0513b61098357600080fd5b6008543b61099057600080fd5b600854301861099e57600080fd5b60206107a0600463d741e2f96107405261075c6008545afa6109bf57600080fd5b6000506107a05130186109d157600080fd5b602061082060046357de26a46107c0526107dc6008543b6109f157600080fd5b60085430186109ff57600080fd5b60206107a0600463d741e2f96107405261075c6008545afa610a2057600080fd5b6000506107a0515afa610a3257600080fd5b600050610820510280608051901315610a4a57600080fd5b8091901215610a5857600080fd5b6108405260a05161084051610300518181028115838383051417610a7b57600080fd5b6402540be400810590509050905080608051901315610a9957600080fd5b8091901215610aa757600080fd5b6107205260206108e0602463ec3e1c85610860526402540be400610720516000811215610ad357600080fd5b046108805261087c6000305af1610ae957600080fd5b6108e050005b636f9fb98a6000511415610b14573415610b0857600080fd5b303160005260206000f3005b63f462fc7c6000511415610b51573415610b2d57600080fd5b600160013360e05260c052604060c02060c052602060c020015460005260206000f3005b638bdb2afa6000511415610b77573415610b6a57600080fd5b60065460005260206000f3005b6307bf76da6000511415610b9d573415610b9057600080fd5b60075460005260206000f3005b632e65ca656000511415610bc3573415610bb657600080fd5b60085460005260206000f3005b63814339216000511415610be9573415610bdc57600080fd5b60095460005260206000f3005b3461014052337ff817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e6020610140a2",
  "source": "from vyper.interfaces import ERC20\n\nstruct CDP:\n  owner: address\n  lockedPeth: uint256\n\n# Interfaces\n\ncontract UniswapFactory():\n    # Create Exchange\n    def createExchange(token: address) -> address: modifying\n    # Public Variables\n    def exchangeTemplate() -> address: constant\n    def tokenCount() -> uint256: constant\n    # Get Exchange and Token Info\n    def getExchange(token_addr: address) -> address: constant\n    def getToken(exchange: address) -> address: constant\n    def getTokenWithId(token_id: uint256) -> address: constant\n    # Initialize Factory\n    def initializeFactory(template: address): modifying\n\ncontract UniswapExchange():\n    # Public Variables\n    def tokenAddress() -> address: constant\n    def factoryAddress() -> address: constant\n    # Providing Liquidity\n    def addLiquidity(min_liquidity: uint256, max_tokens: uint256, deadline: timestamp) -> uint256: modifying\n    def removeLiquidity(amount: uint256, min_eth: uint256(wei), min_tokens: uint256, deadline: timestamp) -> (uint256(wei), uint256): modifying\n    # Trading\n    def ethToTokenSwapInput(min_tokens: uint256, deadline: timestamp) -> uint256: modifying\n    def ethToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying\n    def ethToTokenSwapOutput(tokens_bought: uint256, deadline: timestamp) -> uint256(wei): modifying\n    def ethToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(wei): modifying\n    def tokenToEthSwapInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp) -> uint256(wei): modifying\n    def tokenToEthTransferInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp, recipient: address) -> uint256(wei): modifying\n    def tokenToEthSwapOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp) -> uint256: modifying\n    def tokenToEthTransferOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying\n    def tokenToTokenSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, token_addr: address) -> uint256: modifying\n    def tokenToTokenTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256: modifying\n    def tokenToTokenSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, token_addr: address) -> uint256: modifying\n    def tokenToTokenTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256: modifying\n    def tokenToExchangeSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256: modifying\n    def tokenToExchangeTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256: modifying\n    def tokenToExchangeSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256: modifying\n    def tokenToExchangeTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256: modifying\n    # Get Price\n    def getEthToTokenInputPrice(eth_sold: uint256(wei)) -> uint256: constant\n    def getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei): constant\n    def getTokenToEthInputPrice(tokens_sold: uint256) -> uint256(wei): constant\n    def getTokenToEthOutputPrice(eth_bought: uint256(wei)) -> uint256: constant\n    # Pool Token ERC20 Compatibility\n    def balanceOf() -> address: constant\n    def allowance(_owner : address, _spender : address) -> uint256: constant\n    def transfer(_to : address, _value : uint256) -> bool: modifying\n    def transferFrom(_from : address, _to : address, _value : uint256) -> bool: modifying\n    def approve(_spender : address, _value : uint256) -> bool: modifying\n    # Setup\n    def setup(token_addr: address): modifying\n\n# MakerDAO's SaiTub\ncontract MakerTub():\n  def gov() -> address: constant\n  def sai() -> address: constant\n  def pep() -> address: constant\n  def pip() -> address: constant\n  def skr() -> address: constant\n  def gem() -> address: constant\n  def per() -> uint256: constant\n  def open() -> bytes32: modifying\n  def join(wad: uint256): modifying\n  def exit(wad: uint256): modifying\n  def tab(cupId: bytes32) -> uint256: modifying\n  def rap(cupId: bytes32) -> uint256: modifying\n  def wipe(cupId: bytes32, wad: uint256): modifying\n  def give(cupId: bytes32, guy: address): modifying\n  def lock(cupId: bytes32, wad: uint256): modifying\n  def free(cupId: bytes32, wad: uint256): modifying\n  def draw(cupId: bytes32, wad: uint256): modifying\n\n# Can't use ERC20 since WETH extends w/ deposit() & withdraw()\ncontract WETH():\n  def balanceOf(owner: address) -> uint256: constant\n  def approve(spender: address, amount: uint256) -> bool: modifying\n  def deposit(): modifying\n  def withdraw(amount: uint256): modifying\n\n# to read pip, reference price feed\ncontract DSValue():\n  def read() -> bytes32: constant\n\n# Events\n\n# TODO add events for user actions\nPayment: event({_amount: uint256(wei), _from: indexed(address)})\n\n# Storage\n\nowner: address\nuserToCDP: map(address, CDP)\n\ndai: ERC20\nmkr: ERC20\nweth: WETH\npeth: ERC20\n# TODO remove public from these once tested:\nuniswapFactory: public(UniswapFactory) \ndaiExchange: public(UniswapExchange)\nmakerTub: public(MakerTub)\nmkrExchange: public(UniswapExchange)\n# TODO worth assigning storage to exchanges & tokens?\n# ... can access them all indirectly via Factory & Tub functions. prob cheaper.\n\n# Constructor\n@public\n@payable\ndef __init__(factory: address, tub: address):\n  assert factory != ZERO_ADDRESS\n  assert tub != ZERO_ADDRESS\n  self.owner = msg.sender\n\n  self.makerTub = MakerTub(tub)\n  self.dai = ERC20(self.makerTub.sai())\n  self.mkr = ERC20(self.makerTub.gov())\n  self.weth = WETH(self.makerTub.gem())\n  self.peth = ERC20(self.makerTub.skr()) # TODO needed?\n\n  # Approve MakerDAO to transfer Dai, MKR, PETH, WETH \n  self.dai.approve(self.makerTub, MAX_UINT256)\n  self.mkr.approve(self.makerTub, MAX_UINT256)\n  self.weth.approve(self.makerTub, MAX_UINT256)\n  self.peth.approve(self.makerTub, MAX_UINT256)\n\n  # Get Uniswap exchanges & approve token transfers\n  self.uniswapFactory = UniswapFactory(factory)\n\n  daiExchangeAddress: address = self.uniswapFactory.getExchange(self.makerTub.sai())\n  self.daiExchange = UniswapExchange(daiExchangeAddress)\n  self.dai.approve(daiExchangeAddress, MAX_UINT256)\n\n  mkrExchangeAddress: address = self.uniswapFactory.getExchange(self.makerTub.gov())\n  self.mkrExchange = UniswapExchange(mkrExchangeAddress)\n  self.mkr.approve(mkrExchangeAddress, MAX_UINT256)\n\n# Need default function to receive ETH from Dai exchange\n# https://vyper.readthedocs.io/en/v0.1.0-beta.10/structure-of-a-contract.html#default-function\n@public\n@payable\ndef __default__():\n    log.Payment(msg.value, msg.sender)\n\n# Fund the contract's treasury\n@public\n@payable\ndef fund():\n  assert msg.value > 0, \"Must send value to call this function.\"\n\n# Transfer contract's treasury\n@public\ndef transfer(recipient: address, amount: uint256(wei)):\n  assert msg.sender == self.owner, \"Must be contract owner to call this function.\"\n  assert self.balance >= amount, \"Insufficient contract balance.\"\n  send(recipient, amount)\n\n# TODO set private once tested\n# Exchange DAI for ETH on Uniswap, returns value of ETH received\n@public\ndef exchangeDaiForEth(dai_to_sell: uint256) -> uint256(wei):\n  dai_balance: uint256 = self.dai.balanceOf(self)\n  assert dai_balance > dai_to_sell, \"Insufficient contract balance to sell DAI.\"\n  min_eth_to_buy: uint256(wei) = 1\n  deadline: timestamp = block.timestamp + 300\n  eth_bought: uint256(wei) = self.daiExchange.tokenToEthSwapInput(dai_to_sell, min_eth_to_buy, deadline)\n  return eth_bought\n  # TODO send amount_received to user's CDP\n\n# TODO set private once tested\n# Exchange ETH for DAI on Uniswap, returns value of DAI received\n@public\ndef exchangeEthForDai(wei_to_sell: uint256(wei)) -> uint256:\n  assert self.balance >= wei_to_sell, \"Insufficient contract balance to sell ETH.\"\n  min_tokens_to_buy: uint256 = 1\n  deadline: timestamp = block.timestamp + 300\n  dai_received: uint256 = self.daiExchange.ethToTokenSwapInput(min_tokens_to_buy, deadline, value=wei_to_sell)\n  return dai_received\n  # TODO send amount_received to user's CDP  \n\n# Open leveraged ETH position\n@public\n@payable\ndef openPosition(leverage: decimal):\n  assert msg.value > 0, \"Must send value to call this function.\"\n  assert leverage < 3.0, \"Leverage multiplier must be below 3.\"\n  userDeposit: decimal = convert(as_unitless_number(msg.value), decimal)\n  weiLoan: decimal =  userDeposit * leverage\n  contractBalance: decimal = convert(as_unitless_number(self.balance), decimal)\n  assert contractBalance >= weiLoan, \"Insufficient contract balance. Please use a smaller amount or try again later.\"\n  totalWeiDeposit: decimal = userDeposit + weiLoan\n  \n  # https://github.com/makerdao/developerguides/blob/master/devtools/working-with-dsproxy/working-with-dsproxy.md#opening-a-cdp\n  # TODO check out SaiProxy lockAndDraw & confirm steps are correct\n\n  # convert ETH to WETH\n  self.weth.deposit(value=totalWeiDeposit) # TODO works? no need to convert to uint256(wei)?\n\n  # TODO check if msg.sender has an existing CDP, if so, add totalWeiDeposit to existing CDP?\n  # open CDP\n  cupId: bytes32 = self.makerTub.open()\n  # convert WETH to PETH\n  pethAmount: decimal = totalWeiDeposit / convert(self.makerTub.per(), decimal) # TODO fix. how to calculate?\n  self.makerTub.join(convert(pethAmount, uint256))\n  # Lock PETH in CDP\n  self.makerTub.lock(cupId, convert(pethAmount, uint256))\n  self.userToCDP[msg.sender] = CDP({owner: msg.sender, lockedPeth: convert(pethAmount, uint256)})\n  # draw Dai\n  daiToDraw: decimal = weiLoan * convert(DSValue(self.makerTub.pip()).read(), decimal) # TODO fix. how to calculate?\n  self.exchangeDaiForEth(convert(daiToDraw, uint256))\n  # TODO add platform fee\n\n# Close leveraged ETH position & return funds to user\n# @public\n# def closePosition():\n  # assert user has an open position\n  # use treasury balance to exchange ETH for Dai on Uniswap\n  # pay stability fees w/ Dai: \n  # https://github.com/makerdao/developerguides/blob/master/devtools/working-with-dsproxy/working-with-dsproxy.md#pay-stability-fees-with-dai\n  # close CDP by sending Dai\n  # transfer all funds (minus ethLoan & fees) to msg.sender\n\n@public\n@constant\ndef getContractBalance() -> uint256(wei):\n  return self.balance\n\n@public\n@constant\ndef getLockedEthBalance() -> uint256:\n  return self.userToCDP[msg.sender].lockedPeth",
  "sourcePath": "/Users/samrichards/code/tu/etherswing/contracts/ether_swing.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b10"
  },
  "networks": {
    "1": {
      "events": {
        "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e": {
          "name": "Payment",
          "inputs": [
            {
              "type": "uint256",
              "name": "_amount",
              "indexed": false,
              "unit": "wei"
            },
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e"
        }
      },
      "links": {},
      "address": "0xCb237F97146B68AF6A1A8D9BDbAe42614b4AbD6f",
      "transactionHash": "0x0ef42ecc7a3458f27335a4e8ff1209526f946fd8de26f7f6597d8268d72194f7"
    },
    "5777": {
      "events": {
        "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e": {
          "name": "Payment",
          "inputs": [
            {
              "type": "uint256",
              "name": "_amount",
              "indexed": false,
              "unit": "wei"
            },
            {
              "type": "address",
              "name": "_from",
              "indexed": true
            }
          ],
          "anonymous": false,
          "type": "event",
          "signature": "0xf817bef87c74de34ab725f43b121c1dff5324aa363f7b9ac176b9aee5115230e"
        }
      },
      "links": {},
      "address": "0x756DDDdF176513214551F116BE17F371083D45f0",
      "transactionHash": "0x6f2bfc81daefb3a5ce56525cfdec1bdc5d506a090455ed7c236653cace061fcd"
    }
  },
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-08-22T14:54:45.994Z"
}