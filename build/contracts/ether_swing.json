{
  "contractName": "ether_swing",
  "abi": [
    {
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "uniswap_factory_address"
        },
        {
          "type": "address",
          "name": "dai_token_address"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "constructor"
    },
    {
      "name": "fund",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 345
    },
    {
      "name": "transfer",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "uint256",
          "name": "amount",
          "unit": "wei"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 36106
    },
    {
      "name": "getBalance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out",
          "unit": "wei"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 742
    },
    {
      "name": "owner",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 573
    },
    {
      "name": "uniswapFactoryAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 603
    },
    {
      "name": "daiTokenAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 633
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05260406103e36101403960206103e360c03960c05160205181106100af57600080fd5b50602060206103e30160c03960c05160205181106100cc57600080fd5b50600061014051186100dd57600080fd5b600061016051186100ed57600080fd5b3360005561014051600155610160516002556103cb56600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263b60d42886000511415610115576308c379a0610140526020610160526026610180527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101a0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101c05261018050600034116101135760a461015cfd5b005b63a9059cbb600051141561022a576040600461014037341561013657600080fd5b600435602051811061014757600080fd5b506308c379a06101805260206101a052602d6101c0527f4d75737420626520636f6e7472616374206f776e657220746f2063616c6c20746101e0527f6869732066756e6374696f6e2e00000000000000000000000000000000000000610200526101c05060005433146101bb5760a461019cfd5b6308c379a061024052602061026052601e610280527f496e73756666696369656e7420636f6e74726163742062616c616e63652e00006102a05261028050610160513031101561020c57608461025cfd5b600060006000600061016051610140516000f161022857600080fd5b005b6312065fe0600051141561024f57341561024357600080fd5b303160005260206000f3005b638da5cb5b600051141561027557341561026857600080fd5b60005460005260206000f3005b633655ac3c600051141561029b57341561028e57600080fd5b60015460005260206000f3005b632eaee35e60005114156102c15734156102b457600080fd5b60025460005260206000f3005b60006000fd5b6101046103cb036101046000396101046103cb036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263b60d42886000511415610115576308c379a0610140526020610160526026610180527f4d7573742073656e642076616c756520746f2063616c6c20746869732066756e6101a0527f6374696f6e2e00000000000000000000000000000000000000000000000000006101c05261018050600034116101135760a461015cfd5b005b63a9059cbb600051141561022a576040600461014037341561013657600080fd5b600435602051811061014757600080fd5b506308c379a06101805260206101a052602d6101c0527f4d75737420626520636f6e7472616374206f776e657220746f2063616c6c20746101e0527f6869732066756e6374696f6e2e00000000000000000000000000000000000000610200526101c05060005433146101bb5760a461019cfd5b6308c379a061024052602061026052601e610280527f496e73756666696369656e7420636f6e74726163742062616c616e63652e00006102a05261028050610160513031101561020c57608461025cfd5b600060006000600061016051610140516000f161022857600080fd5b005b6312065fe0600051141561024f57341561024357600080fd5b303160005260206000f3005b638da5cb5b600051141561027557341561026857600080fd5b60005460005260206000f3005b633655ac3c600051141561029b57341561028e57600080fd5b60015460005260206000f3005b632eaee35e60005114156102c15734156102b457600080fd5b60025460005260206000f3005b60006000fd",
  "source": "# NOTE: import statements are currently interpreted from CWD. See:\n# https://github.com/ethereum/vyper/pull/1361\n# So must call compile command from within /contracts/\nimport uniswap_factory_interface as UniswapFactoryInterface\nimport uniswap_exchange_interface as UniswapExchangeInterface\n\n# EtherSwing contract\n\n# Storage\nowner: public(address) # TODO: make private\nuniswapFactoryAddress: public(address)\ndaiTokenAddress: public(address)\n# uniswap_dai_exchange_address: public(address)\n# uniswap_factory: UniswapFactoryInterface\n# uniswap_dai_exchange: UniswapExchangeInterface\n\n# Constructor\n@public\n@payable # TODO vyper issue on error sending value... not obvious constructor must be payable\ndef __init__(uniswap_factory_address: address, dai_token_address: address):\n  assert uniswap_factory_address != ZERO_ADDRESS\n  assert dai_token_address != ZERO_ADDRESS\n  self.owner = msg.sender\n  self.uniswapFactoryAddress = uniswap_factory_address\n  self.daiTokenAddress = dai_token_address\n  # self.uniswap_factory_address = _uniswap_factory_address\n  # self.uniswap_factory = UniswapFactoryInterface(_uniswap_factory_address)\n  # self.uniswap_dai_exchange_address = self.uniswap_factory.getExchange(_dai_token_address)\n  # self.uniswap_dai_exchange = UniswapExchangeInterface(self.uniswap_dai_exchange_address)\n\n# Fund the contract's treasury balance\n@public\n@payable\ndef fund():\n  assert msg.value > 0, \"Must send value to call this function.\"\n\n# Transfer contract's treasury balance\n@public\ndef transfer(recipient: address, amount: uint256(wei)):\n  assert msg.sender == self.owner, \"Must be contract owner to call this function.\"\n  assert self.balance >= amount, \"Insufficient contract balance.\"\n  send(recipient, amount)\n\n# #######\n# Uniswap\n#########\n\n# TODO set private once tested\n# Exchange ETH for DAI on Uniswap, returns value of DAI received\n# @public\n# def exchangeDai(dai_contract: address, amount_eth: uint256) -> uint256:\n  # TODO how to send value (amount_eth) in contract call?\n  # amount_received = uniswap_dai_exchange.ethToTokenSwapInput.value(amount_eth)(min_tokens, deadline)\n  # min_tokens: uint256 = 1 #TODO: implement this correctly, see \"sell order\" logic in docs\n  # deadline: timestamp = block.timestamp + 300\n  # TODO call this from convertCurrency\n  # return min_tokens\n  # return self.uniswap_dai_exchange.ethToTokenSwapInput(min_tokens, deadline)\n  # TODO send amount_received to user's CDP\n\n@public\n@constant\ndef getBalance() -> uint256(wei):\n  return self.balance\n\n##########\n# MakerDAO\n##########\n\n# Storage\n# TODO mapping of user addresses to CDPs\n# TODO CDP struct\n\n# @public\n# @payable\n# def deposit():\n  # assert msg.value > 0, \"Must send value to call this function.\"\n  # assert self.balance >= msg.value, \"Insufficient contract balance to match deposit. Please use a smaller amount or try again later.\"\n  \n  # check if msg.sender already has an open cdp\n\n  # if they do...\n  # add msg.value & matching balance value to existing cdp\n        \n  # if not...\n  # use msg.value & matching balance value to open a cdp\n\n  # return anything?\n  # how to confirm cdp was opened / contributed to succesfully?\n\n# @public\n# def withdraw():\n  # close CDP\n  # transfer all funds (minus contract contribution & fees) to msg.sender\n",
  "sourcePath": "/Users/samrichards/code/tu/etherswing/contracts/ether_swing.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b10"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0x55a925fbFB61A20fAfd57e80E04FAcf354Df2B87",
      "transactionHash": "0x15338b85ebf1fa3b297c8e6e6de2a79a2c5bf791d94d3934ec333f1c6e26a2d3"
    }
  },
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-06-28T18:03:57.459Z"
}