{
  "contractName": "uniswap_exchange_interface",
  "abi": [],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "source": "contract UniswapExchangeInterface():\n    # Public Variables\n    def tokenAddress() -> address: constant\n    def factoryAddress() -> address: constant\n    # Providing Liquidity\n    def addLiquidity(min_liquidity: uint256, max_tokens: uint256, deadline: timestamp) -> uint256: modifying\n    def removeLiquidity(amount: uint256, min_eth: uint256(wei), min_tokens: uint256, deadline: timestamp) -> (uint256(wei), uint256): modifying\n    # Trading\n    def ethToTokenSwapInput(min_tokens: uint256, deadline: timestamp) -> uint256: modifying\n    def ethToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying\n    def ethToTokenSwapOutput(tokens_bought: uint256, deadline: timestamp) -> uint256(wei): modifying\n    def ethToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(wei): modifying\n    def tokenToEthSwapInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp) -> uint256(wei): modifying\n    def tokenToEthTransferInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp, recipient: address) -> uint256(wei): modifying\n    def tokenToEthSwapOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp) -> uint256: modifying\n    def tokenToEthTransferOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying\n    def tokenToTokenSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, token_addr: address) -> uint256: modifying\n    def tokenToTokenTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256: modifying\n    def tokenToTokenSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, token_addr: address) -> uint256: modifying\n    def tokenToTokenTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256: modifying\n    def tokenToExchangeSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256: modifying\n    def tokenToExchangeTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256: modifying\n    def tokenToExchangeSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256: modifying\n    def tokenToExchangeTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256: modifying\n    # Get Price\n    def getEthToTokenInputPrice(eth_sold: uint256(wei)) -> uint256: constant\n    def getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei): constant\n    def getTokenToEthInputPrice(tokens_sold: uint256) -> uint256(wei): constant\n    def getTokenToEthOutputPrice(eth_bought: uint256(wei)) -> uint256: constant\n    # Pool Token ERC20 Compatibility\n    def balanceOf() -> address: constant\n    def allowance(_owner : address, _spender : address) -> uint256: constant\n    def transfer(_to : address, _value : uint256) -> bool: modifying\n    def transferFrom(_from : address, _to : address, _value : uint256) -> bool: modifying\n    def approve(_spender : address, _value : uint256) -> bool: modifying\n    # Setup\n    def setup(token_addr: address): modifying",
  "sourcePath": "/Users/samrichards/code/tu/etherswing/contracts/uniswap_exchange_interface.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b10"
  },
  "networks": {},
  "schemaVersion": "3.0.10",
  "updatedAt": "2019-06-18T06:55:30.630Z"
}